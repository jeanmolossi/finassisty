logging {
  level  = "debug"
  format = "logfmt"
}

otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  http {
    endpoint = "0.0.0.0:4318"
  }
  output {
    metrics = [otelcol.processor.batch.metrics.input]
    traces  = [otelcol.processor.batch.traces.input]
    logs    = [otelcol.processor.batch.logs.input]
  }
}

otelcol.processor.batch "traces" {
  output {
    traces = [otelcol.exporter.otlp.tempo.input]
  }
}

otelcol.processor.batch "metrics" {
  output {
    metrics = [otelcol.exporter.prometheus.mimir.input]
  }
}

otelcol.processor.batch "logs" {
  output {
    logs = [otelcol.exporter.loki.loki.input]
  }
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = sys.env("OTEL_TEMPO_ENDPOINT")
    // Going to production enable auth and remove tls config
    // auth     = otelcol.auth.basic.grafanacloud.handler
    tls {
      insecure = true
    }
  }
}

otelcol.auth.basic "grafanacloud" {
  username = sys.env("OTEL_EXPORTER_OTLP_TRACES_USERNAME")
  password = sys.env("OTEL_EXPORTER_OTLP_ALLOY_TOKEN")
}

otelcol.exporter.prometheus "mimir" {
  forward_to = [prometheus.remote_write.mimir.receiver]
}

prometheus.remote_write "mimir" {
  endpoint {
    url = sys.env("OTEL_PROMETHEUS_ENDPOINT")

    // Going to production uncomment auth
    // basic_auth {
    //  username = sys.env("OTEL_EXPORTER_OTLP_METRICS_USERNAME")
    //  password = sys.env("OTEL_EXPORTER_OTLP_ALLOY_TOKEN")
    // }
  }
}

otelcol.exporter.loki "loki" {
  forward_to = [loki.write.loki.receiver]
}

loki.write "loki" {
  endpoint {
    url = sys.env("OTEL_LOKI_ENDPOINT")

    basic_auth {
      username = sys.env("OTEL_EXPORTER_OTLP_LOGS_USERNAME")
      password = sys.env("OTEL_EXPORTER_OTLP_ALLOY_TOKEN")
    }
  }
}
